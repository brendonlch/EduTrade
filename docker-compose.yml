version: '3.7'

###############################################################
# Current Port Allocation:
    # user      5010:5010
    # trading   5020:5020
    # alerting  5030:5030
    # stock     6010:6010
    # news      6020:6020
###############################################################
volumes:
    pgdata:

networks:
    kong-net:
    broker_network:
        driver: "bridge"

services:
    rabbitmq:
        image: earnestng/esd_stock:rabbitmq
        container_name: rabbitmq
        # ports:
        #     - "5673:5672"
        #     - "15673:15672"
        networks:
            - broker_network
        environment:
            - RABBITMQ_DEFAULT_USER=guest
            - RABBITMQ_DEFAULT_PASS=guest

    ############################################################
    ##  if we want to run a database inside our docker :)
    # db:
    #     image: mysql
    #     ports:
    #         - "3308:3306"
    #     expose:
    #         - '3308'
    #     volumes:
    #         - ./sql-files:/docker-entrypoint-initdb.d
    ############################################################

    user:
        #build: ./user/
        image: earnestng/esd_stock:user
        networks:
            - kong-net
        container_name: user1
        environment:
            # - "dbURL=mysql+mysqlconnector://root:root@host.docker.internal:3306/user" # for mac
            - "dbURL=mysql+mysqlconnector://root@host.docker.internal:3306/user" # for windows
        ports:
            - "5010:5010"
    trading:
        #build: ./trading/
        image: earnestng/esd_stock:trading
        networks:
            - kong-net
        container_name: trading1
        environment:
            # - "dbURL=mysql+mysqlconnector://root:root@host.docker.internal:3306/transaction" # for mac
            - "dbURL=mysql+mysqlconnector://root@host.docker.internal:3306/transaction" # for windows
        ports:
            - "5020:5020"
    trading2:
        image: earnestng/esd_stock:trading
        networks:
            - kong-net
        container_name: trading2
        environment:
            # - "dbURL=mysql+mysqlconnector://root:root@host.docker.internal:3306/transaction" # for mac
            - "dbURL=mysql+mysqlconnector://root@host.docker.internal:3306/transaction" # for windows
    alerting:
        #build: ./alerting/
        image: earnestng/esd_stock:alerting
        networks:
            - kong-net
        container_name: alerting1
        environment:
            # - "dbURL=mysql+mysqlconnector://root:root@host.docker.internal:3306/alert" # for mac
            - "dbURL=mysql+mysqlconnector://root@host.docker.internal:3306/alert" # for windows
        ports:
            - "5030:5030"
    stock:
        #build: ./stock/
        image: earnestng/esd_stock:stock
        networks:
            - kong-net
        container_name: stock1
        environment:
            # - "dbURL=mysql+mysqlconnector://root:root@host.docker.internal:3306/stock" # for mac
            - "dbURL=mysql+mysqlconnector://root@host.docker.internal:3306/stock" # for windows
        ports:
            - "6010:6010"
    news:
        #build: ./news/
        image: earnestng/esd_stock:news
        networks:
            - kong-net
        container_name: news1
        environment:
            # - "dbURL=mysql+mysqlconnector://root:root@host.docker.internal:3306/news" # for mac
            - "dbURL=mysql+mysqlconnector://root@host.docker.internal:3306/news" # for windows
        ports:
            - "6020:6020"

    #######################################
    # Postgres: The database used by Kong
    #######################################
    kong-database:
        image: postgres:9.6
        container_name: kong-database
        restart: on-failure
        networks:
            - kong-net
        volumes:
            - pgdata:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: kong
            POSTGRES_PASSWORD: password
            POSTGRES_DB: kong
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "kong"]
            interval: 30s
            timeout: 30s
            retries: 3

    #######################################
    # Kong database migration
    #######################################
    kong-migration:
        image: kong
        command: kong migrations bootstrap
        networks:
            - kong-net
        restart: on-failure
        environment:
            KONG_DATABASE: postgres
            KONG_PG_HOST: kong-database
            KONG_PG_USER: kong
            KONG_PG_PASSWORD: password
        depends_on:
            - kong-database

    #######################################
    # Kong: The API Gateway
    #######################################
    kong:
        image: kong
        restart: on-failure
        container_name: kong
        networks:
            - kong-net
        environment:
            KONG_DATABASE: postgres
            KONG_PG_HOST: kong-database
            KONG_PG_USER: kong
            KONG_PG_PASSWORD: password
            KONG_PROXY_LISTEN: 0.0.0.0:8000
            KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
            KONG_ADMIN_LISTEN: 0.0.0.0:8001
        depends_on:
            - kong-database
        healthcheck:
            test: ["CMD", "kong", "health"]
            interval: 10s
            timeout: 10s
            retries: 10
        ports:
            - "8000:8000"
            - "8001:8001"
            - "8443:8443"
            - "8444:8444"
        # plugins:
        #     name: cors
        #     service: edutrade.trading
        #     config:
        #         origins:
        #             - '*'
        #         methods:
        #             - GET
        #             - POST
        #         headers:
        #             - Accept
        #             - Accept-Version
        #             - Content-Length
        #             - Content-MD5
        #             - Content-Type
        #             - Date
        #             - X-Auth-Token
        #         exposed_headers:
        #             - X-Auth-Token
        #         credentials: true
        #         max_age: 3600

    #######################################
    # Konga database prepare
    #######################################
    konga-prepare:
        image: pantsel/konga
        command: "-c prepare -a postgres -u postgresql://kong:password@kong-database:5432/konga"
        networks:
            - kong-net
        restart: on-failure
        depends_on:
            - kong-database

    #######################################
    # Konga: Kong GUI
    #######################################
    konga:
        image: pantsel/konga
        container_name: konga
        restart: always
        networks:
            - kong-net
        environment:
            DB_ADAPTER: postgres
            DB_URI: postgresql://kong:password@kong-database:5432/konga
            NODE_ENV: production

        depends_on:
            - kong-database
        ports:
            - "1337:1337"
